export const jsVal =
  "var File = function(url, object){\n\tFile.list = Array.isArray(File.list)? File.list : [];\n\tFile.progress = File.progress || 0;\n\tthis.progress = 0;\n\tthis.object = object;\n\tthis.url = url;\n};\n\nFile.indexOf = function(term){\n\tfor(var index in File.list){\n\t\tvar file = File.list[index];\n\t\tif (file.equals(term) || file.url === term || file.object === term) {\n\t\t\treturn index;\n\t\t}\n\t}\n\treturn -1;\n};\n\nFile.find = function(term){\n\tvar index = File.indexOf(term);\n\treturn ~index && File.list[index];\n};\n\nFile.prototype.equals = function(file){\n\tvar isFileType = file instanceof File;\n\treturn isFileType && this.url === file.url && this.object === file.object;\n};\n\nFile.prototype.save = function(update){\n\tupdate = typeof update === 'undefined'? true : update; \n\tif(Array.isArray(File.list)){\n\t\tvar index = File.indexOf(this);\n\t\tif(~index && update) {\n\t\t\tFile.list[index] = this; \n\t\t\tconsole.warn('File `%s` has been loaded before and updated now for: %O.', this.url, this);\n\t\t}else File.list.push(this);\n\t\tconsole.log(File.list)\n\t}else{\n\t\tFile.list = [this];\n\t}\n\treturn this;\n};"
